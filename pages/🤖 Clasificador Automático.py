import streamlit as st
import pandas as pd
import os
from openai import OpenAI
import numpy as np
import re
from openpyxl import load_workbook




pd.options.display.float_format = '{:,.2f}'.format


st.set_page_config(
    page_title="Monthly - App Interna",
    page_icon="游눶",
    layout="wide"
)

st.markdown("""
<style>
button {
    background-color: #14E79D;
}
</style>
""", unsafe_allow_html=True)


header_logo_1, header_logo_2 = st.columns(2)
with header_logo_1:
    st.image(
                "./Logo. Monthly Oficial.png",
                width=250, # Manually Adjust the width of the image as per requirement
            )
with header_logo_2:
    st.markdown("<h2 style='text-align: right; color: #5666FF;'>游뱄 Clasificador Autom치tico</h2>", unsafe_allow_html=True)

st.divider()

#ChatGPT
# Access the OpenAI API key from the secrets
api_key = st.secrets["OPENAI_API_KEY"]

# Set up the OpenAI API client
openai = OpenAI(api_key=api_key)

uploaded_file = st.file_uploader("Inserta el Excel (.xlsx, .csv) aqu칤:", type=['csv'])


if uploaded_file is not None:
    df = pd.read_csv(uploaded_file)
    st.write(df)
    clicked = st.button("Generar Clasificaci칩n 游뱄",type="primary")
    if clicked:

        with st.spinner("Generando Clasificaciones:"):
            catalogo_df = pd.read_excel("Categorizador 2025.xlsx")
            catalogo_df = catalogo_df.iloc[:-1]
            catalogo_df_clean = catalogo_df.fillna(0)
            catalogo_df_clean["C칩digo"] = catalogo_df_clean["C칩digo"].astype(float)
            catalogo_df_clean = catalogo_df_clean.sort_values(by = "C칩digo", ascending = True)
            catalogo_df_clean["C칩digo"] = catalogo_df_clean["C칩digo"].astype(str)
            catalogo_df_clean["Clase"] = catalogo_df_clean["C칩digo"].str[0].astype(int)
            catalogo_df_clean["CATEGOR칈A (MONTHLY WAY)"] = catalogo_df_clean["Categor칤a"].astype(str).str[0:3]
            
            clases = [1,2,3,5,6,7,8]
            monthly_cat_clase = catalogo_df_clean[["Clase", "Cuenta", "CATEGOR칈A (MONTHLY WAY)", "Categor칤a",	"Secci칩n", "ID"]]
            monthly_cat_clase["Categor칤a"] = monthly_cat_clase["Categor칤a"].astype(str).str[4:]
            monthly_cat_clase = monthly_cat_clase.drop_duplicates()
            monthly_cat_clase = monthly_cat_clase[monthly_cat_clase["Secci칩n"] != "-"]
            monthly_cat_clase = monthly_cat_clase[monthly_cat_clase["Clase"].isin(clases)]

            #Cat치logo de Ingresos
            seccion_cat = pd.read_excel("Monthly - Catalogo.xlsx", sheet_name = "Categorizaci칩n de clientes")
            seccion_cat = seccion_cat[seccion_cat["SECCI칍N (MONTHLY WAY)"] == "(a)"]
            seccion_cat = seccion_cat[seccion_cat["ID-CATEGOR칈A"] != "ES-PERSONAL"]
            seccion_cat = seccion_cat.rename(columns = {"CATEGOR칈A (MONTHLY WAY)": "Cuenta","SECCI칍N (MONTHLY WAY)": "CATEGOR칈A (MONTHLY WAY)", "SECCI칍N":"Secci칩n", "ID-CATEGOR칈A":"ID" })
            seccion_cat["Categor칤a"] = "Ingreso"
            seccion_cat["Clase"] = 4
            seccion_cat = seccion_cat[["Clase", "Cuenta", "CATEGOR칈A (MONTHLY WAY)", "Categor칤a", "Secci칩n", "ID"]].drop_duplicates()

            catalogo = pd.concat([monthly_cat_clase, seccion_cat]).sort_values(by = ["Clase", "Cuenta"], ascending = [True, True])
            catalogo = catalogo.rename(columns = {"Cuenta": "Cuenta SAT", "Categor칤a": "Categor칤a Monthly"})


            api_key = os.getenv("OPENAI_API_KEY")
            openai.api_key = api_key
            # La clave API expuesta aqu칤 podr칤a ser un riesgo de seguridad. En un proyecto real, esta clave deber칤a cargarse desde variables de entorno o un archivo protegido.
            
            classification_list = [] # NOTA: Esta lista no se hab칤a definido ya en la celda anterior? Volverla a definir no afecta el resultado?
            unfiltered_classification_list = []
            # Crea una lista vac칤a para almacenar los resultados de las clasificaciones realizadas con el modelo GPT.
            
            # La funci칩n classify_word clasificar치 palabras en categor칤as proporcionadas usando la API de OpenAI.
            def classify_word(word, categories):
                # Construcci칩n del prompt que solicitar치 clasificar una lista de palabras en las categor칤as dadas, con instrucciones claras de devolver solo el formato esperado.
                prompt_for_classification = f"Clasifica las palabras {', '.join(word)} en una de las siguientes categorias: {', '.join(categories)}. No incluyas explicaci칩n, ni desarrollo, ni justificaci칩n; s칩lamente la categor칤a que m치s se asemeje. Si es que no hay suficiente informaci칩n para clasificar, pon la clasificaci칩n 0. Entregame esta clasificaci칩n en formato lista de python de esta manera: ['Palabra 1','Categor칤a de Palabra 1','Palabra 2','Categor칤a de Palabra 2', ...'Palabra n','Categor칤a de Palabra n']"
                response = openai.chat.completions.create(
                    model="gpt-4", # Usa el modelo GPT-4 para procesar el prompt y generar una respuesta.
                    messages=[
                        {"role": "system", "content": "You are a helpful assistant."},
                        {"role": "user", "content": prompt_for_classification}
                    ]
                )
                classification = response.choices[0].message.content.strip()
                # Devuelve la clasificaci칩n generada como un string:
            
                return classification
            
            # Clasificaci칩n por clase:
            for i in set(list(df["Clase"])):
            # Itera sobre cada valor 칰nico en la columna "Clase" de df.
                st.write(i)
                cat = list(set(catalogo[(catalogo["Clase"] == i) & (catalogo["ID"] == "ES-MONTHLY")]["Cuenta SAT"]))
                # Filtra el DataFrame monthly_cat_clase para obtener las categor칤as ("CATEGOR칈A (MONTHLY WAY)") relacionadas con la clase actual (i) y el identificador "ES-MONTHLY".
                st.write(cat)
                # Crear words_list:
                if len(list(df[(df["Nivel"] == 2) & (df["Clase"] == i)]["Nombre"]) ) == 0:
                    words_list = list(df[(df["Nivel"] == 1) & (df["Clase"] == i)]["Nombre"])
                else:
                    words_list = list(df[(df["Nivel"] == 2) & (df["Clase"] == i)]["Nombre"])
                # Crea una lista de nombres de cuentas (words_list) bas치ndose en el nivel y clase.
                # Para clases 1, 2, y 3, toma cuentas de nivel 1.
                # Para otras clases: Si no hay cuentas de nivel 2, usa las de nivel 1; Si hay cuentas de nivel 2, usa todas las de niveles 1 y 2.
                st.write(words_list)
            
                # Clasificaci칩n de las palabras:
                classification = classify_word(words_list, cat)
                match = re.search(r"\[.*\]", classification)
                # Usa classify_word para obtener la clasificaci칩n de las palabras en words_list usando las categor칤as de cat.
                # Busca el formato de una lista en la respuesta usando expresiones regulares.
            
                # Manejo de la respuesta:
                unfiltered_classification_list.append(classification)
            
                try:
                  classification = eval(classification)
                except:
                  counter = 0
                  open = 0
                  close = 0
                  for i in classification:
                    if i == "[":
                      open = counter
                    if i == "]":
                      close = counter
                    counter += 1
                  classification = eval("["+classification[open+1:close]+"]")
                #finally:
                    #pass
                #    data_cleaned = eval(classification.replace("\n", ""))
                classification_list.append(classification)
                #finally:
                #    pass
                # Convierte la respuesta de GPT en una lista v치lida de Python y la a침ade a classification_list.
                # Maneja excepciones en caso de que la conversi칩n falle.
            
            # Consolidaci칩n de resultados:
                #classification_list
            
            #if len(classification_list[0]) == 1:
            #    classification_list = [classification_list[:2]] + classification_list[2:]
            #if len(classification_list[-1]) == 1:
            #    classification_list = classification_list[:-2] + [classification_list[-2:]]
            # Combina todas las clasificaciones en una lista 칰nica (result).
            
            
            # Ajusta classification_list si las primeras o 칰ltimas clasificaciones tienen una estructura inusual.
            
            results = sum(classification_list, [])
            nombre_result_list = results[0::2]
            categoria_result_list = results[1::2]
            
            
            result_df = pd.DataFrame()
            result_df["Nombre"] = nombre_result_list
            result_df["Categor칤a"] = categoria_result_list
            result_df = result_df.drop_duplicates()
            
            
            # Crear el DataFrame final:
            # Convierte result en un DataFrame con columnas "Nombre" y "Categor칤a".
            # Elimina duplicados para asegurar que cada combinaci칩n sea 칰nica.
        

                

            
            st.write(result_df)
