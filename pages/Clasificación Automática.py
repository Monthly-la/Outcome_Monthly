import streamlit as st

st.set_page_config(
    page_title="Monthly - App Interna",
    page_icon="游눶",
    layout="wide"
)

st.button("")

    header_logo_1, header_logo_2 = st.columns(2)
    with header_logo_1:
        st.image(
                    "https://monthly.la/wp-content/uploads/2024/02/Monthly-Logo.png",
                    width=200, # Manually Adjust the width of the image as per requirement
                )
    with header_logo_2:
        st.markdown("<h2 style='text-align: right; color: #5666FF;'>游뱄 Secciones Autom치ticas</h2>", unsafe_allow_html=True)
    
    st.divider()
    
    #ChatGPT
    # Ensure the CSV has the correct column name
    openai.api_key = ''
    
    classification_list = []
    for i in list(set(df["Clase"])):
        words_list = df[df["Clase"] == i]["Nombre"].tolist()
        
        # Step 2: Use GPT to Suggest 5 Categories
        prompt_for_categories = f"Basado en las siguientes palabras: {', '.join(words_list)}, sugiere 5 distintas categor칤as en las cual clasificarlas. No redactes nada m치s que una lista de 5 conceptos (no descripciones, no pre치mbulo de la respuesta, no conclusi칩n; s칩lo la lista separada por comas)"
        response = openai.chat.completions.create(
            model="gpt-4",  # Use the desired model
            messages=[
                {"role": "system", "content": "You are a helpful assistant."},
                {"role": "user", "content": prompt_for_categories}
            ]
        )
        categories = response.choices[0].message.content.strip().split('\n')
        
    # Step 3: Classify Each Word
    def classify_word(word, categories):
        prompt_for_classification = f"Clasifica las palabras {', '.join(words_list)} en una de las siguientes categorias: {', '.join(categories)}. No incluyas explicaci칩n, ni desarrollo, ni justificaci칩n; s칩lamente la categor칤a que m치s se asemeje. Si es que no hay suficiente informaci칩n para clasificar, pon la clasificaci칩n previa. Entregame esta clasificaci칩n en formato lista de tuples de python de esta manera: [('Palabra 1','Categor칤a'), ('Palabra 2': 'Categor칤a'), ('Palabra 3': 'Categor칤a')...]"
        response = openai.chat.completions.create(
            model="gpt-4",
            messages=[
                {"role": "system", "content": "You are a helpful assistant."},
                {"role": "user", "content": prompt_for_classification}
            ]
            
        )
        classification = response.choices[0].message.content.strip()
        return classification
        
    classification = classify_word(words_list, categories)
    classification_list.append(classification)
    
    categoria_df = pd.DataFrame(["",""], ["Nombre", "Categor칤a"]).T
    
    for c in classification_list:
    categoria_df = pd.concat([categoria_df,pd.DataFrame(eval(c), columns = ["Nombre", "Categor칤a"])])
    categoria_df = categoria_df.iloc[1:]
    
    nombre_list = []
    for n in categoria_df["Nombre"]:
    nombre_list.append(n.strip())
    
    categoria_df["Nombre"] = nombre_list
    
    df_categorizado = df.merge(categoria_df, on = "Nombre", how = "left")
    
    st.write(df_categorizado)
    st.write(
